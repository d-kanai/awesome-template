plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'nu.studer.jooq' version '8.2'
    id 'jacoco'
    id 'org.springdoc.openapi-gradle-plugin' version '1.8.0'
}

openApi {
    apiDocsUrl = 'http://localhost:8080/v3/api-docs'
    outputDir = file("$buildDir/openapi")
    outputFileName = 'openapi.json'
    waitTimeInSeconds = 10
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '21'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
    runtimeOnly 'org.postgresql:postgresql'

    jooqGenerator 'org.postgresql:postgresql'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'com.h2database:h2'
}

jooq {
    version = '3.18.7'
    configurations {
        main {
            generationTool {
                logging = org.jooq.meta.jaxb.Logging.WARN
                jdbc {
                    driver = 'org.postgresql.Driver'
                    url = 'jdbc:postgresql://localhost:5432/demodb'
                    user = 'demo'
                    password = 'demo123'
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        inputSchema = 'public'
                    }
                    generate {
                        pojos = false
                        daos = false
                    }
                    target {
                        packageName = 'com.example.demo.infrastructure.jooq'
                        directory = 'build/generated-src/jooq'
                    }
                }
            }
        }
    }
}

sourceSets {
    main {
        java {
            srcDirs += 'build/generated-src/jooq'
        }
    }
}

tasks.named('compileJava') {
    dependsOn tasks.named('generateJooq')
}

tasks.named('test') {
    useJUnitPlatform()
    testLogging {
        events "passed", "failed", "skipped"
        showExceptions = true
        exceptionFormat = 'short'
        showStandardStreams = false
    }
    jacoco {
        excludes = [
            'com/example/demo/infrastructure/jooq/**',
            'com/example/demo/DemoApplication*',
            'com/example/demo/modules/health/**'
        ]
    }
}

jacoco {
    toolVersion = "0.8.11"
}

tasks.named('jacocoTestReport') {
    dependsOn tasks.named('test')
    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir("reports/jacoco/test")
    }
    classDirectories.setFrom(
        files(classDirectories.files.collect { dir ->
            fileTree(dir: dir, exclude: [
                'com/example/demo/infrastructure/jooq/**',
                'com/example/demo/DemoApplication*',
                'com/example/demo/modules/health/**'
            ])
        })
    )
}
